t_std_resid <- rstandard(t_pokemon_model)
t_leverages <- hatvalues(t_pokemon_model)
t_cooks <- cooks.distance(t_pokemon_model)
t_outlier <- t_std_resid[abs(t_std_resid) > 2]
t_leverage_point <- t_leverages[t_leverages > ((2 * (p + 1)) / n)]
t_influential <- t_cooks[t_cooks > 4 / (n - 2)]
t_outlier_by_leverage <- t_std_resid[t_leverages > ((2 * (p + 1)) / n)]
t_bad_leverage <- t_outlier_by_leverage[abs(t_outlier_by_leverage) > 2]
t_bad_leverage
vif(t_pokemon_model)
pairs(t_weight ~ t_bes + t_attack + t_defense + t_hp + t_sa + t_sd + t_cp + experience_growth)
library(tidyverse)
library(car)
library(leaps)
pokemon <- read_csv("pokemon.csv", show_col_types = FALSE)
transformed_pokemon_subset <- data.frame(cbind(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth))
pokemon_model_subsets <- regsubsets(t_weight~t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth, data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
pokemon_adj_r2 <- sapply(pokemon_model_list, function(x) summary(x)$adj.r.squared)
pokemon_adj_r2
pokemon_AIC <- sapply(pokemon_model_list, function(x) extractAIC(x)[2])
pokemon_AIC
p=8
pokemon_AICc <- sapply(pokemon_model_list, function(x) extractAIC(x)[2]+2*(p+2)*(p+3)/(802-p-1))
pokemon_AICc
pokemon_BIC <- sapply(pokemon_model_list, function(x) extractAIC(x, k=log(802))[2])
pokemon_BIC
size <- c(1, 2, 3, 4, 5, 6, 7, 8)
pokemon_gof <- data.frame(cbind(size, pokemon_adj_r2, pokemon_AIC, pokemon_AICc, pokemon_BIC))
pokemon_gof
nrow(pokemon_model_subsets)
nrow(transformed_pokemon_subset)
transformed_pokemon_subset <- data.frame(cbind(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth))
pokemon_model_subsets <- regsubsets(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth,
data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
transformed_pokemon_subset
nrow(t_pokemon_model)
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
sub_fit <- function(x, n) {
size <- seq_along(x)
radj2 <- numeric(0)
aic <- numeric(0)
aic_cor <- numeric(0)
bic <- numeric(0)
for (i in seq_along(x)) {
radj2 <- c(radj2, summary(x[[i]])$adj.r.squared)
aic <- c(aic, extractAIC(x[[i]])[2])
aic_cor <- c(aic_cor, extractAIC(x[[i]])[2]+ (2 * (i + 2) * (i + 3)) / (n - i - 1))
bic <- c(bic, extractAIC(x[[i]], k = log(n))[2])
}
data.frame(Size = size, Radj2 = radj2, AIC = aic, AICc = aic_cor, BIC = bic)
}
pokemon_gof <- sub_fit(pokemon_model_list, n = n nrow(pokemon_subset))
pokemon_gof <- sub_fit(pokemon_model_list, n = n nrow(pokemon_subset))
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
sub_fit <- function(x, n) {
size <- seq_along(x)
radj2 <- numeric(0)
aic <- numeric(0)
aic_cor <- numeric(0)
bic <- numeric(0)
for (i in seq_along(x)) {
radj2 <- c(radj2, summary(x[[i]])$adj.r.squared)
aic <- c(aic, extractAIC(x[[i]])[2])
aic_cor <- c(aic_cor, extractAIC(x[[i]])[2]+ (2 * (i + 2) * (i + 3)) / (n - i - 1))
bic <- c(bic, extractAIC(x[[i]], k = log(n))[2])
}
data.frame(Size = size, Radj2 = radj2, AIC = aic, AICc = aic_cor, BIC = bic)
}
pokemon_gof <- sub_fit(pokemon_model_list, n = nrow(pokemon_subset))
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
sub_fit <- function(x, n) {
size <- seq_along(x)
radj2 <- numeric(0)
aic <- numeric(0)
aic_cor <- numeric(0)
bic <- numeric(0)
for (i in seq_along(x)) {
radj2 <- c(radj2, summary(x[[i]])$adj.r.squared)
aic <- c(aic, extractAIC(x[[i]])[2])
aic_cor <- c(aic_cor, extractAIC(x[[i]])[2]+ (2 * (i + 2) * (i + 3)) / (n - i - 1))
bic <- c(bic, extractAIC(x[[i]], k = log(n))[2])
}
data.frame(Size = size, Radj2 = radj2, AIC = aic, AICc = aic_cor, BIC = bic)
}
pokemon_gof <- sub_fit(pokemon_model_list, n = nrow(pokemon_subset))
pokemon_gof
pokemon_adj_r2 <- sapply(pokemon_model_list, function(x) summary(x)$adj.r.squared)
pokemon_adj_r2
pokemon_AIC <- sapply(pokemon_model_list, function(x) extractAIC(x)[2])
pokemon_AIC
p=8
pokemon_AICc <- sapply(pokemon_model_list, function(x) extractAIC(x)[2]+2*(p+2)*(p+3)/(802-p-1))
pokemon_AICc
pokemon_BIC <- sapply(pokemon_model_list, function(x) extractAIC(x, k=log(802))[2])
pokemon_BIC
size <- c(1, 2, 3, 4, 5, 6, 7, 8)
pokemon_gof <- data.frame(cbind(size, pokemon_adj_r2, pokemon_AIC, pokemon_AICc, pokemon_BIC))
pokemon_gof
transformed_pokemon_subset <- data.frame(cbind(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth))
pokemon_model_subsets <- regsubsets(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth,
data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
min(pokemon_gof$pokemon_adj_r2)
max(pokemon_gof$pokemon_adj_r2)
which.max(pokemon_gof$pokemon_adj_r2)
which.min(pokemon_gof$pokemon_AIC)
which.max(pokemon_gof$pokemon_adj_r2)
which.min(pokemon_gof$pokemon_AIC)
which.min(pokemon_gof$pokemon_AICc)
which.max(pokemon_gof$pokemon_adj_r2)
which.min(pokemon_gof$pokemon_AIC)
which.min(pokemon_gof$pokemon_AICc)
which.min(pokemon_gof$pokemon_BIC)
transformed_pokemon_subset <- data.frame(cbind(t_weight~t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth))
pokemon_model_subsets <- regsubsets(t_weight~t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth, data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
library(leaps)
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
pokemon_adj_r2 <- sapply(pokemon_model_list, function(x) summary(x)$adj.r.squared)
pokemon_adj_r2
pokemon_AIC <- sapply(pokemon_model_list, function(x) extractAIC(x)[2])
pokemon_AIC
p=8
pokemon_AICc <- sapply(pokemon_model_list, function(x) extractAIC(x)[2]+2*(p+2)*(p+3)/(802-p-1))
pokemon_AICc
pokemon_BIC <- sapply(pokemon_model_list, function(x) extractAIC(x, k=log(802))[2])
pokemon_BIC
size <- c(1, 2, 3, 4, 5, 6, 7, 8)
pokemon_gof <- data.frame(cbind(size, pokemon_adj_r2, pokemon_AIC, pokemon_AICc, pokemon_BIC))
pokemon_gof
which.max(pokemon_gof$pokemon_adj_r2)
which.min(pokemon_gof$pokemon_AIC)
which.min(pokemon_gof$pokemon_AICc)
which.min(pokemon_gof$pokemon_BIC)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(car)
library(leaps)
pokemon <- read_csv("pokemon.csv", show_col_types = FALSE)
pokemon
dim(pokemon) #dataset dimensions
# non-numeric inputs detected
pokemon$capture_rate[is.na(as.numeric(pokemon$capture_rate))]
# modified dataset for compatibility
pokemod <- read_csv("pokemon_mod.csv", show_col_types = FALSE)
pokemod
pokemon_subset <- pokemod[, c("weight_kg", "base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]
pokemon_subset
pairs(pokemon_subset)
pokemon_full_model <- lm(weight_kg ~ capture_rate + base_egg_steps + attack + defense + hp +
sp_attack + sp_defense + capture_rate + experience_growth,
data = pokemon_subset)
summary(pokemon_full_model)
which(!complete.cases(pokemon_subset))
pokemon_subset[which(!complete.cases(pokemon_subset)), ]
par(mfrow = c(2, 2))
plot(pokemon_full_model)
cof <- summary(pokemon_full_model)$coefficients
pokemon_full_model_pt <- powerTransform(pokemon_subset)
summary(pokemon_full_model_pt)
attach(pokemon_subset)
t_weight <- weight_kg^0.16
t_bes <- base_egg_steps^-0.67
t_attack <- attack^0.5
t_defense <- defense^0.33
t_hp <- hp^0.33
t_sa <- sp_attack^0.33
t_sd <- sp_defense^0.15
t_cp <- capture_rate^0.33
t_pokemon_model <- lm(t_weight ~ t_bes + t_attack + t_defense + t_hp +
t_sa + t_sd + t_cp + experience_growth)
summary(t_pokemon_model)
par(mfrow = c(2, 2))
plot(t_pokemon_model)
pow <- summary(pokemon_full_model_pt)$result[, 2]
cof <- summary(t_pokemon_model)$coefficients
pokemon_subset2 <- pokemod[, c("weight_kg", "base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]
attach(pokemon_subset2)
exp_model <- powerTransform((pokemon_subset2[, c("base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]))
summary(exp_model)
t2_bes <- base_egg_steps^-0.67
t2_attack <- attack^0.5
t2_defense <- defense^0.33
t2_hp <- hp^0.33
t2_sa <- sp_attack^0.33
t2_sd <- sp_defense^0.14
t2_cp <- capture_rate^0.33
test2 <- lm(weight_kg ~ t2_bes + t2_attack + t2_defense + t2_hp + t2_sa + t2_sd + t2_cp)
par(mfrow = c(1,1))
inverseResponsePlot(test2)
t2_weight <- weight_kg^0.35
t2_pokemon_model <- lm(t2_weight ~ t2_bes + t2_attack + t2_defense + t2_hp +
t2_sa + t2_sd + t2_cp + experience_growth)
par(mfrow = c(2, 2))
plot(t2_pokemon_model)
pow <- summary(exp_model)$result[, 2]
cof <- t2_pokemon_model$coefficients
vif(t_pokemon_model)
summary(t_pokemon_model)
n <- nrow(pokemon_subset)
p <- 8
t_std_resid <- rstandard(t_pokemon_model)
t_leverages <- hatvalues(t_pokemon_model)
t_cooks <- cooks.distance(t_pokemon_model)
t_outlier <- t_std_resid[abs(t_std_resid) > 2]
t_leverage_point <- t_leverages[t_leverages > ((2 * (p + 1)) / n)]
t_influential <- t_cooks[t_cooks > 4 / (n - 2)]
t_outlier_by_leverage <- t_std_resid[t_leverages > ((2 * (p + 1)) / n)]
t_bad_leverage <- t_outlier_by_leverage[abs(t_outlier_by_leverage) > 2]
t_bad_leverage
vif(t2_pokemon_model)
summary(t2_pokemon_model)
n <- nrow(pokemon_subset)
p <- 8
t2_std_resid <- rstandard(t2_pokemon_model)
t2_leverages <- hatvalues(t2_pokemon_model)
t2_cooks <- cooks.distance(t2_pokemon_model)
t2_outlier <- t_std_resid[abs(t2_std_resid) > 2]
t2_leverage_point <- t2_leverages[t2_leverages > ((2 * (p + 1)) / n)]
t2_influential <- t2_cooks[t_cooks > 4 / (n - 2)]
t2_outlier_by_leverage <- t2_std_resid[t2_leverages > ((2 * (p + 1)) / n)]
t2_bad_leverage <- t2_outlier_by_leverage[abs(t2_outlier_by_leverage) > 2]
t2_bad_leverage
vif(t_pokemon_model)
pairs(t_weight ~ t_bes + t_attack + t_defense + t_hp + t_sa + t_sd + t_cp + experience_growth)
transformed_pokemon_subset <- data.frame(cbind(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth))
pokemon_model_subsets <- regsubsets(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth,
data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
sub_fit <- function(x, n) {
size <- seq_along(x)
radj2 <- numeric(0)
aic <- numeric(0)
aic_cor <- numeric(0)
bic <- numeric(0)
for (i in seq_along(x)) {
radj2 <- c(radj2, summary(x[[i]])$adj.r.squared)
aic <- c(aic, extractAIC(x[[i]])[2])
aic_cor <- c(aic_cor, extractAIC(x[[i]])[2]+ (2 * (i + 2) * (i + 3)) / (n - i - 1))
bic <- c(bic, extractAIC(x[[i]], k = log(n))[2])
}
data.frame(Size = size, Radj2 = radj2, AIC = aic, AICc = aic_cor, BIC = bic)
}
pokemon_gof <- sub_fit(pokemon_model_list, n = nrow(pokemon_subset))
pokemon_gof
which.max(pokemon_gof$pokemon_adj_r2)
which.min(pokemon_gof$pokemon_AIC)
which.min(pokemon_gof$pokemon_AICc)
which.min(pokemon_gof$pokemon_BIC)
which.max(pokemon_gof$Radj2)
which.min(pokemon_gof$AIC)
which.min(pokemon_gof$AICc)
which.min(pokemon_gof$BIC)
rownames(pokemon_gof)
colnames(pokemon_gof)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(car)
library(leaps)
pokemon <- read_csv("pokemon.csv", show_col_types = FALSE)
pokemon
dim(pokemon) #dataset dimensions
# non-numeric inputs detected
pokemon$capture_rate[is.na(as.numeric(pokemon$capture_rate))]
# modified dataset for compatibility
pokemod <- read_csv("pokemon_mod.csv", show_col_types = FALSE)
pokemod
pokemon_subset <- pokemod[, c("weight_kg", "base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]
pokemon_subset
pairs(pokemon_subset)
pokemon_full_model <- lm(weight_kg ~ capture_rate + base_egg_steps + attack + defense + hp +
sp_attack + sp_defense + capture_rate + experience_growth,
data = pokemon_subset)
summary(pokemon_full_model)
which(!complete.cases(pokemon_subset))
pokemon_subset[which(!complete.cases(pokemon_subset)), ]
par(mfrow = c(2, 2))
plot(pokemon_full_model)
cof <- summary(pokemon_full_model)$coefficients
pokemon_full_model_pt <- powerTransform(pokemon_subset)
summary(pokemon_full_model_pt)
attach(pokemon_subset)
t_weight <- weight_kg^0.16
t_bes <- base_egg_steps^-0.67
t_attack <- attack^0.5
t_defense <- defense^0.33
t_hp <- hp^0.33
t_sa <- sp_attack^0.33
t_sd <- sp_defense^0.15
t_cp <- capture_rate^0.33
t_pokemon_model <- lm(t_weight ~ t_bes + t_attack + t_defense + t_hp +
t_sa + t_sd + t_cp + experience_growth)
summary(t_pokemon_model)
par(mfrow = c(2, 2))
plot(t_pokemon_model)
pow <- summary(pokemon_full_model_pt)$result[, 2]
cof <- summary(t_pokemon_model)$coefficients
pokemon_subset2 <- pokemod[, c("weight_kg", "base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]
attach(pokemon_subset2)
exp_model <- powerTransform((pokemon_subset2[, c("base_egg_steps", "attack", "defense", "hp",
"sp_attack", "sp_defense", "capture_rate", "experience_growth")]))
summary(exp_model)
t2_bes <- base_egg_steps^-0.67
t2_attack <- attack^0.5
t2_defense <- defense^0.33
t2_hp <- hp^0.33
t2_sa <- sp_attack^0.33
t2_sd <- sp_defense^0.14
t2_cp <- capture_rate^0.33
test2 <- lm(weight_kg ~ t2_bes + t2_attack + t2_defense + t2_hp + t2_sa + t2_sd + t2_cp)
par(mfrow = c(1,1))
inverseResponsePlot(test2)
t2_weight <- weight_kg^0.35
t2_pokemon_model <- lm(t2_weight ~ t2_bes + t2_attack + t2_defense + t2_hp +
t2_sa + t2_sd + t2_cp + experience_growth)
par(mfrow = c(2, 2))
plot(t2_pokemon_model)
pow <- summary(exp_model)$result[, 2]
cof <- t2_pokemon_model$coefficients
vif(t_pokemon_model)
summary(t_pokemon_model)
n <- nrow(pokemon_subset)
p <- 8
t_std_resid <- rstandard(t_pokemon_model)
t_leverages <- hatvalues(t_pokemon_model)
t_cooks <- cooks.distance(t_pokemon_model)
t_outlier <- t_std_resid[abs(t_std_resid) > 2]
t_leverage_point <- t_leverages[t_leverages > ((2 * (p + 1)) / n)]
t_influential <- t_cooks[t_cooks > 4 / (n - 2)]
t_outlier_by_leverage <- t_std_resid[t_leverages > ((2 * (p + 1)) / n)]
t_bad_leverage <- t_outlier_by_leverage[abs(t_outlier_by_leverage) > 2]
t_bad_leverage
vif(t2_pokemon_model)
summary(t2_pokemon_model)
n <- nrow(pokemon_subset)
p <- 8
t2_std_resid <- rstandard(t2_pokemon_model)
t2_leverages <- hatvalues(t2_pokemon_model)
t2_cooks <- cooks.distance(t2_pokemon_model)
t2_outlier <- t_std_resid[abs(t2_std_resid) > 2]
t2_leverage_point <- t2_leverages[t2_leverages > ((2 * (p + 1)) / n)]
t2_influential <- t2_cooks[t_cooks > 4 / (n - 2)]
t2_outlier_by_leverage <- t2_std_resid[t2_leverages > ((2 * (p + 1)) / n)]
t2_bad_leverage <- t2_outlier_by_leverage[abs(t2_outlier_by_leverage) > 2]
t2_bad_leverage
vif(t_pokemon_model)
pairs(t_weight ~ t_bes + t_attack + t_defense + t_hp + t_sa + t_sd + t_cp + experience_growth)
transformed_pokemon_subset <- data.frame(cbind(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth))
pokemon_model_subsets <- regsubsets(t_weight ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth,
data = transformed_pokemon_subset)
summary(pokemon_model_subsets)
p1 <- lm(weight_kg ~ t_hp)
p2 <- lm(weight_kg ~ t_defense+t_hp)
p3 <- lm(weight_kg ~ t_attack+t_defense+t_hp)
p4 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp)
p5 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+experience_growth)
p6 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_cp+experience_growth)
p7 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sd+t_cp+experience_growth)
p8 <- lm(weight_kg ~ t_bes+t_attack+t_defense+t_hp+t_sa+t_sd+t_cp+experience_growth)
pokemon_model_list <- list(p1, p2, p3, p4, p5, p6, p7, p8)
sub_fit <- function(x, n) {
size <- seq_along(x)
radj2 <- numeric(0)
aic <- numeric(0)
aic_cor <- numeric(0)
bic <- numeric(0)
for (i in seq_along(x)) {
radj2 <- c(radj2, summary(x[[i]])$adj.r.squared)
aic <- c(aic, extractAIC(x[[i]])[2])
aic_cor <- c(aic_cor, extractAIC(x[[i]])[2]+ (2 * (i + 2) * (i + 3)) / (n - i - 1))
bic <- c(bic, extractAIC(x[[i]], k = log(n))[2])
}
data.frame(Size = size, Radj2 = radj2, AIC = aic, AICc = aic_cor, BIC = bic)
}
pokemon_gof <- sub_fit(pokemon_model_list, n = nrow(pokemon_subset))
pokemon_gof
which.max(pokemon_gof$Radj2)
which.min(pokemon_gof$AIC)
which.min(pokemon_gof$AICc)
which.min(pokemon_gof$BIC)
pokemon_base <- lm(t_weight ~ 1)
forwardAIC <- step(pokemon_base,
scope = list(lower = ~ 1,
upper = ~ t_bes + t_attack + t_defense +
t_hp + t_sa + t_sd + t_cp + experience_growth),
direction = "forward")
data.frame(colnames(pokemon_gof)[-1], Model = list(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC)))
# which.max(pokemon_gof$Radj2)
# which.min(pokemon_gof$AIC)
# which.min(pokemon_gof$AICc)
# which.min(pokemon_gof$BIC)
# data.frame(colnames(pokemon_gof)[-1], Model = list(which.max(pokemon_gof$Radj2),
#                                                    which.min(pokemon_gof$AIC),
#                                                    which.min(pokemon_gof$AICc),
#                                                    which.min(pokemon_gof$BIC)))
# which.max(pokemon_gof$Radj2)
# which.min(pokemon_gof$AIC)
# which.min(pokemon_gof$AICc)
# which.min(pokemon_gof$BIC)
list(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC))
# data.frame(colnames(pokemon_gof)[-1], Model = list(which.max(pokemon_gof$Radj2),
#                                                    which.min(pokemon_gof$AIC),
#                                                    which.min(pokemon_gof$AICc),
#                                                    which.min(pokemon_gof$BIC)))
# which.max(pokemon_gof$Radj2)
# which.min(pokemon_gof$AIC)
# which.min(pokemon_gof$AICc)
# which.min(pokemon_gof$BIC)
c(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC))
data.frame(colnames(pokemon_gof)[-1], Model = c(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC)))
# which.max(pokemon_gof$Radj2)
# which.min(pokemon_gof$AIC)
# which.min(pokemon_gof$AICc)
# which.min(pokemon_gof$BIC)
# c(which.max(pokemon_gof$Radj2),
#      which.min(pokemon_gof$AIC),
#      which.min(pokemon_gof$AICc),
#      which.min(pokemon_gof$BIC))
data.frame(colnames(Criteria =pokemon_gof)[-1], Model = c(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC)))
data.frame(Criteria = colnames(pokemon_gof)[-1], Model = c(which.max(pokemon_gof$Radj2),
which.min(pokemon_gof$AIC),
which.min(pokemon_gof$AICc),
which.min(pokemon_gof$BIC)))
# which.max(pokemon_gof$Radj2)
# which.min(pokemon_gof$AIC)
# which.min(pokemon_gof$AICc)
# which.min(pokemon_gof$BIC)
# c(which.max(pokemon_gof$Radj2),
#      which.min(pokemon_gof$AIC),
#      which.min(pokemon_gof$AICc),
#      which.min(pokemon_gof$BIC))
